from state_machine import AFD
from lex import lex

program = '''
a = 12 + 34;

def asdf() {
    float var = 0.23;
    string other_var = "Um texto qualquer, que tem virgula e ponto e se quiser underline ___. Ja ia esquecendo dos numeros 1234567890";
    
    if (1 == 1) {
        print("Hello world")
    }
    
    return 12.0032;
}

'''

afd_operators = AFD(
    transitions={
        ('q0', '*'): 'q1',
        ('q0', '-'): 'q1',
        ('q0', '+'): 'q1',
        ('q0', '='): 'q1',
        ('q0', '/'): 'q1',
        ('q0', '%'): 'q1',
    },
    start_state='q0',
    accepting_states={'q1'},
    name="OP"
)

afd_cond_operators = AFD(
    transitions={
        ('q0', '<'): 'q1',
        ('q0', '>'): 'q2',
        ('q0', '!'): 'q3',
        ('q0', '='): 'q4',
        ('q1', '='): 'q5',
        ('q2', '='): 'q6',
        ('q3', '='): 'q7',
        ('q4', '='): 'q8',
    },
    start_state='q0',
    accepting_states={'q5', 'q6', 'q7', 'q8'},
    name="COND_OP"
)

afd_separators = AFD(
    transitions={
        ('q0', ','): 'q1',
        ('q0', ';'): 'q1',
        ('q0', '['): 'q1',
        ('q0', ']'): 'q1',
        ('q0', '{'): 'q1',
        ('q0', '}'): 'q1',
        ('q0', '('): 'q1',
        ('q0', ')'): 'q1',
    },
    start_state='q0',
    accepting_states={'q1'},
    name="SEP",
)

afd_blank = AFD(
    transitions={
        ('q0', ' '): 'q1',
        ('q0', '\n'): 'q1',
        ('q0', '\t'): 'q1',
        ('q1', ' '): 'q1',
        ('q1', '\n'): 'q1',
        ('q1', '\t'): 'q1',
    },
    start_state='q0',
    accepting_states={'q1'},
    name="BLANK"
)

afd_ident = AFD(
    transitions={
        ('q0', 'a'): 'q1',
        ('q0', 'b'): 'q1',
        ('q0', 'c'): 'q1',
        ('q0', 'd'): 'q1',
        ('q0', 'e'): 'q1',
        ('q0', 'f'): 'q1',
        ('q0', 'g'): 'q1',
        ('q0', 'h'): 'q1',
        ('q0', 'i'): 'q1',
        ('q0', 'j'): 'q1',
        ('q0', 'k'): 'q1',
        ('q0', 'l'): 'q1',
        ('q0', 'm'): 'q1',
        ('q0', 'n'): 'q1',
        ('q0', 'o'): 'q1',
        ('q0', 'p'): 'q1',
        ('q0', 'q'): 'q1',
        ('q0', 'r'): 'q1',
        ('q0', 's'): 'q1',
        ('q0', 't'): 'q1',
        ('q0', 'u'): 'q1',
        ('q0', 'v'): 'q1',
        ('q0', 'w'): 'q1',
        ('q0', 'x'): 'q1',
        ('q0', 'y'): 'q1',
        ('q0', 'z'): 'q1',
        ('q0', 'A'): 'q1',
        ('q0', 'B'): 'q1',
        ('q0', 'C'): 'q1',
        ('q0', 'D'): 'q1',
        ('q0', 'E'): 'q1',
        ('q0', 'F'): 'q1',
        ('q0', 'G'): 'q1',
        ('q0', 'H'): 'q1',
        ('q0', 'I'): 'q1',
        ('q0', 'J'): 'q1',
        ('q0', 'K'): 'q1',
        ('q0', 'L'): 'q1',
        ('q0', 'M'): 'q1',
        ('q0', 'N'): 'q1',
        ('q0', 'O'): 'q1',
        ('q0', 'P'): 'q1',
        ('q0', 'Q'): 'q1',
        ('q0', 'R'): 'q1',
        ('q0', 'S'): 'q1',
        ('q0', 'T'): 'q1',
        ('q0', 'U'): 'q1',
        ('q0', 'V'): 'q1',
        ('q0', 'W'): 'q1',
        ('q0', 'X'): 'q1',
        ('q0', 'Y'): 'q1',
        ('q0', 'Z'): 'q1',
        ('q0', '_'): 'q1',
        ('q1', 'a'): 'q1',
        ('q1', 'b'): 'q1',
        ('q1', 'c'): 'q1',
        ('q1', 'd'): 'q1',
        ('q1', 'e'): 'q1',
        ('q1', 'f'): 'q1',
        ('q1', 'g'): 'q1',
        ('q1', 'h'): 'q1',
        ('q1', 'i'): 'q1',
        ('q1', 'j'): 'q1',
        ('q1', 'k'): 'q1',
        ('q1', 'l'): 'q1',
        ('q1', 'm'): 'q1',
        ('q1', 'n'): 'q1',
        ('q1', 'o'): 'q1',
        ('q1', 'p'): 'q1',
        ('q1', 'q'): 'q1',
        ('q1', 'r'): 'q1',
        ('q1', 's'): 'q1',
        ('q1', 't'): 'q1',
        ('q1', 'u'): 'q1',
        ('q1', 'v'): 'q1',
        ('q1', 'w'): 'q1',
        ('q1', 'x'): 'q1',
        ('q1', 'y'): 'q1',
        ('q1', 'z'): 'q1',
        ('q1', 'A'): 'q1',
        ('q1', 'B'): 'q1',
        ('q1', 'C'): 'q1',
        ('q1', 'D'): 'q1',
        ('q1', 'E'): 'q1',
        ('q1', 'F'): 'q1',
        ('q1', 'G'): 'q1',
        ('q1', 'H'): 'q1',
        ('q1', 'I'): 'q1',
        ('q1', 'J'): 'q1',
        ('q1', 'K'): 'q1',
        ('q1', 'L'): 'q1',
        ('q1', 'M'): 'q1',
        ('q1', 'N'): 'q1',
        ('q1', 'O'): 'q1',
        ('q1', 'P'): 'q1',
        ('q1', 'Q'): 'q1',
        ('q1', 'R'): 'q1',
        ('q1', 'S'): 'q1',
        ('q1', 'T'): 'q1',
        ('q1', 'U'): 'q1',
        ('q1', 'V'): 'q1',
        ('q1', 'W'): 'q1',
        ('q1', 'X'): 'q1',
        ('q1', 'Y'): 'q1',
        ('q1', 'Z'): 'q1',
        ('q1', '1'): 'q1',
        ('q1', '2'): 'q1',
        ('q1', '3'): 'q1',
        ('q1', '4'): 'q1',
        ('q1', '5'): 'q1',
        ('q1', '6'): 'q1',
        ('q1', '7'): 'q1',
        ('q1', '8'): 'q1',
        ('q1', '9'): 'q1',
        ('q1', '0'): 'q1',
        ('q1', '_'): 'q1',
    },
    start_state='q0',
    accepting_states={'q1'},
    name="ID"
)

afd_string = AFD(
    transitions={
        ('q0', '"'): 'q1',
        ('q1', 'a'): 'q1',
        ('q1', 'b'): 'q1',
        ('q1', 'c'): 'q1',
        ('q1', 'd'): 'q1',
        ('q1', 'e'): 'q1',
        ('q1', 'f'): 'q1',
        ('q1', 'g'): 'q1',
        ('q1', 'h'): 'q1',
        ('q1', 'i'): 'q1',
        ('q1', 'j'): 'q1',
        ('q1', 'k'): 'q1',
        ('q1', 'l'): 'q1',
        ('q1', 'm'): 'q1',
        ('q1', 'n'): 'q1',
        ('q1', 'o'): 'q1',
        ('q1', 'p'): 'q1',
        ('q1', 'q'): 'q1',
        ('q1', 'r'): 'q1',
        ('q1', 's'): 'q1',
        ('q1', 't'): 'q1',
        ('q1', 'u'): 'q1',
        ('q1', 'v'): 'q1',
        ('q1', 'w'): 'q1',
        ('q1', 'x'): 'q1',
        ('q1', 'y'): 'q1',
        ('q1', 'z'): 'q1',
        ('q1', 'A'): 'q1',
        ('q1', 'B'): 'q1',
        ('q1', 'C'): 'q1',
        ('q1', 'D'): 'q1',
        ('q1', 'E'): 'q1',
        ('q1', 'F'): 'q1',
        ('q1', 'G'): 'q1',
        ('q1', 'H'): 'q1',
        ('q1', 'I'): 'q1',
        ('q1', 'J'): 'q1',
        ('q1', 'K'): 'q1',
        ('q1', 'L'): 'q1',
        ('q1', 'M'): 'q1',
        ('q1', 'N'): 'q1',
        ('q1', 'O'): 'q1',
        ('q1', 'P'): 'q1',
        ('q1', 'Q'): 'q1',
        ('q1', 'R'): 'q1',
        ('q1', 'S'): 'q1',
        ('q1', 'T'): 'q1',
        ('q1', 'U'): 'q1',
        ('q1', 'V'): 'q1',
        ('q1', 'W'): 'q1',
        ('q1', 'X'): 'q1',
        ('q1', 'Y'): 'q1',
        ('q1', 'Z'): 'q1',
        ('q1', '1'): 'q1',
        ('q1', '2'): 'q1',
        ('q1', '3'): 'q1',
        ('q1', '4'): 'q1',
        ('q1', '5'): 'q1',
        ('q1', '6'): 'q1',
        ('q1', '7'): 'q1',
        ('q1', '8'): 'q1',
        ('q1', '9'): 'q1',
        ('q1', '0'): 'q1',
        ('q1', ' '): 'q1',
        ('q1', '_'): 'q1',
        ('q1', '.'): 'q1',
        ('q1', ','): 'q1',
        ('q1', '"'): 'q2',
    },
    start_state='q0',
    accepting_states={'q2'},
    name="STRING_CONSTANT"
)

afd_int_constant = AFD(
    transitions={
        ('q0', '1'): 'q1',
        ('q0', '2'): 'q1',
        ('q0', '3'): 'q1',
        ('q0', '4'): 'q1',
        ('q0', '5'): 'q1',
        ('q0', '6'): 'q1',
        ('q0', '7'): 'q1',
        ('q0', '8'): 'q1',
        ('q0', '9'): 'q1',
        ('q0', '0'): 'q2',
        ('q1', '1'): 'q1',
        ('q1', '2'): 'q1',
        ('q1', '3'): 'q1',
        ('q1', '4'): 'q1',
        ('q1', '5'): 'q1',
        ('q1', '6'): 'q1',
        ('q1', '7'): 'q1',
        ('q1', '8'): 'q1',
        ('q1', '9'): 'q1',
        ('q1', '0'): 'q1',
    },
    start_state='q0',
    accepting_states={'q1', 'q2'},
    name="INT_CONSTANT"
)

afd_float_constant = AFD(
    transitions={
        ('q0', '1'): 'q1',
        ('q0', '2'): 'q1',
        ('q0', '3'): 'q1',
        ('q0', '4'): 'q1',
        ('q0', '5'): 'q1',
        ('q0', '6'): 'q1',
        ('q0', '7'): 'q1',
        ('q0', '8'): 'q1',
        ('q0', '9'): 'q1',
        ('q0', '0'): 'q2',
        ('q1', '1'): 'q1',
        ('q1', '2'): 'q1',
        ('q1', '3'): 'q1',
        ('q1', '4'): 'q1',
        ('q1', '5'): 'q1',
        ('q1', '6'): 'q1',
        ('q1', '7'): 'q1',
        ('q1', '8'): 'q1',
        ('q1', '9'): 'q1',
        ('q1', '0'): 'q1',
        ('q1', '.'): 'q3',
        ('q2', '.'): 'q3',

        ('q3', '1'): 'q4',
        ('q3', '2'): 'q4',
        ('q3', '3'): 'q4',
        ('q3', '4'): 'q4',
        ('q3', '5'): 'q4',
        ('q3', '6'): 'q4',
        ('q3', '7'): 'q4',
        ('q3', '8'): 'q4',
        ('q3', '9'): 'q4',
        ('q3', '0'): 'q4',

        ('q4', '1'): 'q4',
        ('q4', '2'): 'q4',
        ('q4', '3'): 'q4',
        ('q4', '4'): 'q4',
        ('q4', '5'): 'q4',
        ('q4', '6'): 'q4',
        ('q4', '7'): 'q4',
        ('q4', '8'): 'q4',
        ('q4', '9'): 'q4',
        ('q4', '0'): 'q4',
    },
    start_state='q0',
    accepting_states={'q4'},
    name="FLOAT_CONSTANT"
)

afd_keywords = AFD(
    transitions={
        ('q0', 'f'): 'q1',
        ('q1', 'o'): 'q2',
        ('q2', 'r'): 'q3',

        ('q1', 'l'): 'q5',
        ('q5', 'o'): 'q6',
        ('q6', 'a'): 'q7',
        ('q7', 't'): 'q8',
        
        ('q0', 'e'): 'q9',
        ('q9', 'l'): 'q10',
        ('q10', 's'): 'q11',
        ('q11', 'e'): 'q12',
        
        ('q0', 'p'): 'q13',
        ('q13', 'r'): 'q14',
        ('q14', 'i'): 'q15',
        ('q15', 'n'): 'q16',
        ('q16', 't'): 'q17',

        ('q0', 'b'): 'q18',
        ('q18', 'r'): 'q18',
        ('q19', 'e'): 'q19',
        ('q20', 'a'): 'q21',
        ('q21', 'k'): 'q22',

        ('q0', 'd'): 'q23',
        ('q23', 'e'): 'q24',
        ('q24', 'f'): 'q25',

        ('q0', 'r'): 'q26',
        ('q26', 'e'): 'q27',
        ('q27', 't'): 'q28',
        ('q28', 'u'): 'q29',
        ('q29', 'r'): 'q30',
        ('q30', 'n'): 'q31',

        ('q27', 'a'): 'q32',
        ('q32', 'd'): 'q33',

        ('q0', 'c'): 'q34',
        ('q34', 'a'): 'q35',
        ('q35', 'l'): 'q36',
        ('q36', 'l'): 'q37',

        ('q0', 's'): 'q38',
        ('q38', 't'): 'q39',
        ('q39', 'r'): 'q40',
        ('q40', 'i'): 'q41',
        ('q41', 'n'): 'q42',
        ('q42', 'g'): 'q43',

        ('q0', 'n'): 'q44',
        ('q44', 'u'): 'q45',
        ('q45', 'l'): 'q46',
        ('q46', 'l'): 'q47',

        ('q44', 'e'): 'q48',
        ('q48', 'w'): 'q49',

        ('q0', 'i'): 'q50',
        ('q50', 'f'): 'q51',

        ('q50', 'n'): 'q51',
        ('q52', 't'): 'q53',
    },
    start_state='q0',
    accepting_states={'q3', 'q8', 'q12', 'q17', 'q22', 'q25', 'q31', 'q33', 'q37', 'q43', 'q47', 'q49', 'q51', 'q53'},
    name="KEYWORD"
)


# A ordem das execuções da maquinas importam
afds = [
    (afd_keywords, 1),
    (afd_ident, 1),
    (afd_blank, 1),
    (afd_int_constant, 1),
    (afd_float_constant, 1),
    (afd_string, 1),
    (afd_cond_operators, 1),
    (afd_operators, 1),
    (afd_separators, 1)
]


if __name__ == "__main__":
    tokens = lex(program, afds)
    print(tokens)
