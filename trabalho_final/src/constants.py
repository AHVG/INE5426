from src.state_machine import StateMachine


afd_operators = StateMachine(
    name="OP",
    states=["q0", "q1", "q2", "q3", "q4", "q5", "q6"],
    initial_state="q0",
    accepting_states={"q1", "q2", "q3", "q4", "q5", "q6"},
    transitions=[
        ("q0", r"\*", "q1"),
        ("q0", r"-", "q2"),
        ("q0", r"\+", "q3"),
        ("q0", r"=", "q4"),
        ("q0", r"/", "q5"),
        ("q0", r"%", "q6"),
    ],
)

afd_cond_operators = StateMachine(
    name="COND_OP",
    states=["q0", "q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8"],
    initial_state="q0",
    accepting_states={"q1", "q2", "q5", "q6", "q7", "q8"},
    transitions=[
        ("q0", r"<", "q1"),
        ("q0", r">", "q2"),
        ("q0", r"!", "q3"),
        ("q0", r"=", "q4"),
        ("q1", r"=", "q5"),
        ("q2", r"=", "q6"),
        ("q3", r"=", "q7"),
        ("q4", r"=", "q8"),
    ],
)


afd_separators = StateMachine(
    name="SEP",
    states=["q0", "q1"],
    initial_state="q0",
    accepting_states={"q1"},
    transitions=[
        ("q0", r",", "q1"),
        ("q0", r";", "q1"),
        ("q0", r"\[", "q1"),
        ("q0", r"\]", "q1"),
        ("q0", r"\{", "q1"),
        ("q0", r"\}", "q1"),
        ("q0", r"\(", "q1"),
        ("q0", r"\)", "q1"),
    ],
)


afd_blank = StateMachine(
    name="WS",
    states=["q0", "q1"],
    initial_state="q0",
    accepting_states={"q1"},
    transitions=[
        ("q0", r"[ \n\t]", "q1"),
        ("q1", r"[ \n\t]", "q1"),
    ],
)


afd_ident = StateMachine(
    name="IDENT",
    states=["q0", "q1"],
    initial_state="q0",
    accepting_states={"q1"},
    transitions=[
        ("q0", r"[a-zA-Z_]", "q1"),
        ("q1", r"[a-zA-Z0-9_]", "q1"),
    ],
)


afd_string = StateMachine(
    name="STRING_CONSTANT",
    states=["q0", "q1", "q2"],
    initial_state="q0",
    accepting_states={"q2"},
    transitions=[
        ("q0", r'"', "q1"),
        ("q1", r'[^"]', "q1"),
        ("q1", r'"', "q2"),
    ],
)

# Não pode terminar com int o programa?
afd_int_constant = StateMachine(
    name="INT_CONSTANT",
    states=["q0", "q1", "q2", "q3*", "q4*"],
    initial_state="q0",
    accepting_states={"q3*", "q4*"},
    transitions=[
        ("q0", r"[1-9]", "q1"),
        ("q0", r"0", "q2"),
        ("q1", r"[0-9]", "q1"),
        ("q1", r"[^a-zA-Z0-9]", 'q3*'),
        ("q2", r"[^a-zA-Z0-9]", 'q4*'),
    ],
)

# Não pode terminar com float o programa?
afd_float_constant = StateMachine(
    name="FLOAT_CONSTANT",
    states=["q0", "q1", "q2", "q3", "q4", 'q5*'],
    initial_state="q0",
    accepting_states={"q5*"},
    transitions=[
        ("q0", r"[1-9]", "q1"),
        ("q0", r"0", "q2"),
        ("q1", r"[0-9]", "q1"),
        ("q1", r"\.", "q3"),
        ("q2", r"\.", "q3"),
        ("q3", r"[0-9]", "q4"),
        ("q4", r"[0-9]", "q4"),
        ("q4", r"[^a-zA-Z0-9]", 'q5*'),
    ],
)

KEYWORDS = ["for", "float", "else", "print", "break", "def", "return", "read", "call", "string", "null", "new", "if", "int"]

# IMPORTANTE: A ordem importa!!
MACHINES = [
    afd_ident,
    afd_blank,
    afd_int_constant,
    afd_float_constant,
    afd_string,
    afd_cond_operators,
    afd_operators,
    afd_separators
]

LL1_TABLE = {   'ALLOCEXPRESSION': {'new': ['new', "ALLOCEXPRESSION'"]},
    "ALLOCEXPRESSION'": {   'float': ['float', "ALLOCEXPRESSION''"],
                            'int': ['int', "ALLOCEXPRESSION''"],
                            'string': ['string', "ALLOCEXPRESSION''"]},
    "ALLOCEXPRESSION''": {'[': ['[', 'NUMEXPRESSION', ']', "ALLOCEXPRESSION'''"]},
    "ALLOCEXPRESSION'''": {')': ['ε'], ';': ['ε'], '[': ["ALLOCEXPRESSION''"]},
    'ATRIBSTAT': {'ident': ['LVALUE', '=', "ATRIBSTAT'"]},
    "ATRIBSTAT'": {   '(': ['EXPRESSION'],
                      '+': ['EXPRESSION'],
                      '-': ['EXPRESSION'],
                      'call': ['FUNCCALL'],
                      'float_constant': ['EXPRESSION'],
                      'ident': ['EXPRESSION'],
                      'int_constant': ['EXPRESSION'],
                      'new': ['ALLOCEXPRESSION'],
                      'null': ['EXPRESSION'],
                      'string_constant': ['EXPRESSION']},
    'EXPRESSION': {   '(': ['NUMEXPRESSION', "EXPRESSION'"],
                      '+': ['NUMEXPRESSION', "EXPRESSION'"],
                      '-': ['NUMEXPRESSION', "EXPRESSION'"],
                      'float_constant': ['NUMEXPRESSION', "EXPRESSION'"],
                      'ident': ['NUMEXPRESSION', "EXPRESSION'"],
                      'int_constant': ['NUMEXPRESSION', "EXPRESSION'"],
                      'null': ['NUMEXPRESSION', "EXPRESSION'"],
                      'string_constant': ['NUMEXPRESSION', "EXPRESSION'"]},
    "EXPRESSION'": {   '!=': ['!=', 'NUMEXPRESSION'],
                       ')': ['ε'],
                       ';': ['ε'],
                       '<': ['<', "EXPRESSION''"],
                       '==': ['==', 'NUMEXPRESSION'],
                       '>': ['>', "EXPRESSION''"]},
    "EXPRESSION''": {   '(': ['NUMEXPRESSION'],
                        '+': ['NUMEXPRESSION'],
                        '-': ['NUMEXPRESSION'],
                        '=': ['=', 'NUMEXPRESSION'],
                        'float_constant': ['NUMEXPRESSION'],
                        'ident': ['NUMEXPRESSION'],
                        'int_constant': ['NUMEXPRESSION'],
                        'null': ['NUMEXPRESSION'],
                        'string_constant': ['NUMEXPRESSION']},
    'FACTOR': {   '(': ['(', 'NUMEXPRESSION', ')'],
                  'float_constant': ['float_constant'],
                  'ident': ['LVALUE'],
                  'int_constant': ['int_constant'],
                  'null': ['null'],
                  'string_constant': ['string_constant']},
    'FORSTAT': {'for': ['for', '(', 'ATRIBSTAT', ';', 'EXPRESSION', ';', 'ATRIBSTAT', ')', 'STATEMENT']},
    'FUNCCALL': {'call': ['call', 'ident', '(', 'PARAMLISTCALL', ')']},
    'FUNCDEF': {'def': ['def', 'ident', '(', 'PARAMLIST', ')', '{', 'STATELIST', '}']},
    'FUNCLIST': {'def': ['FUNCDEF', "FUNCLIST'"]},
    "FUNCLIST'": {'$': ['ε'], 'def': ['FUNCLIST']},
    'IFSTAT': {'if': ['if', '(', 'EXPRESSION', ')', '{', 'STATELIST', '}', "IFSTAT'"]},
    "IFSTAT'": {   '$': ['ε'],
                   ';': ['ε'],
                   'break': ['ε'],
                   'else': ['else', "IFSTAT''"],
                   'float': ['ε'],
                   'for': ['ε'],
                   'ident': ['ε'],
                   'if': ['ε'],
                   'int': ['ε'],
                   'print': ['ε'],
                   'read': ['ε'],
                   'return': ['ε'],
                   'string': ['ε'],
                   '{': ['ε'],
                   '}': ['ε']},
    "IFSTAT''": {'if': ['IFSTAT'], '{': ['{', 'STATELIST', '}']},
    'LVALUE': {'ident': ['ident', "LVALUE'"]},
    "LVALUE'": {   '!=': ['ε'],
                   '%': ['ε'],
                   ')': ['ε'],
                   '*': ['ε'],
                   '+': ['ε'],
                   '-': ['ε'],
                   '/': ['ε'],
                   ';': ['ε'],
                   '<': ['ε'],
                   '=': ['ε'],
                   '==': ['ε'],
                   '>': ['ε'],
                   '[': ['[', 'NUMEXPRESSION', ']', "LVALUE'"],
                   ']': ['ε']},
    'NUMEXPRESSION': {   '(': ['TERM', "NUMEXPRESSION'"],
                         '+': ['TERM', "NUMEXPRESSION'"],
                         '-': ['TERM', "NUMEXPRESSION'"],
                         'float_constant': ['TERM', "NUMEXPRESSION'"],
                         'ident': ['TERM', "NUMEXPRESSION'"],
                         'int_constant': ['TERM', "NUMEXPRESSION'"],
                         'null': ['TERM', "NUMEXPRESSION'"],
                         'string_constant': ['TERM', "NUMEXPRESSION'"]},
    "NUMEXPRESSION'": {   '!=': ['ε'],
                          ')': ['ε'],
                          '+': ['+', 'NUMEXPRESSION'],
                          '-': ['-', 'NUMEXPRESSION'],
                          ';': ['ε'],
                          '<': ['ε'],
                          '==': ['ε'],
                          '>': ['ε'],
                          ']': ['ε']},
    'PARAMLIST': {   ')': ['ε'],
                     'float': ['float', 'ident', "PARAMLIST'"],
                     'int': ['int', 'ident', "PARAMLIST'"],
                     'string': ['string', 'ident', "PARAMLIST'"]},
    "PARAMLIST'": {')': ['ε'], ',': [',', 'PARAMLIST']},
    'PARAMLISTCALL': {')': ['ε'], 'ident': ['ident', "PARAMLISTCALL'"]},
    "PARAMLISTCALL'": {')': ['ε'], ',': [',', 'PARAMLISTCALL']},
    'PRINTSTAT': {'print': ['print', 'EXPRESSION']},
    'READSTAT': {'read': ['read', 'LVALUE']},
    'RETURNSTAT': {'return': ['return', "RETURNSTAT'"]},
    "RETURNSTAT'": {   '(': ['EXPRESSION'],
                       '+': ['EXPRESSION'],
                       '-': ['EXPRESSION'],
                       ';': ['ε'],
                       'float_constant': ['EXPRESSION'],
                       'ident': ['EXPRESSION'],
                       'int_constant': ['EXPRESSION'],
                       'null': ['EXPRESSION'],
                       'string_constant': ['EXPRESSION']},
    'S': {   '$': ['start', '$'],
             ';': ['start', '$'],
             'break': ['start', '$'],
             'def': ['start', '$'],
             'float': ['start', '$'],
             'for': ['start', '$'],
             'ident': ['start', '$'],
             'if': ['start', '$'],
             'int': ['start', '$'],
             'print': ['start', '$'],
             'read': ['start', '$'],
             'return': ['start', '$'],
             'string': ['start', '$'],
             '{': ['start', '$']},
    'STATELIST': {   ';': ['STATEMENT', "STATELIST'"],
                     'break': ['STATEMENT', "STATELIST'"],
                     'float': ['STATEMENT', "STATELIST'"],
                     'for': ['STATEMENT', "STATELIST'"],
                     'ident': ['STATEMENT', "STATELIST'"],
                     'if': ['STATEMENT', "STATELIST'"],
                     'int': ['STATEMENT', "STATELIST'"],
                     'print': ['STATEMENT', "STATELIST'"],
                     'read': ['STATEMENT', "STATELIST'"],
                     'return': ['STATEMENT', "STATELIST'"],
                     'string': ['STATEMENT', "STATELIST'"],
                     '{': ['STATEMENT', "STATELIST'"]},
    "STATELIST'": {   ';': ['STATELIST'],
                      'break': ['STATELIST'],
                      'float': ['STATELIST'],
                      'for': ['STATELIST'],
                      'ident': ['STATELIST'],
                      'if': ['STATELIST'],
                      'int': ['STATELIST'],
                      'print': ['STATELIST'],
                      'read': ['STATELIST'],
                      'return': ['STATELIST'],
                      'string': ['STATELIST'],
                      '{': ['STATELIST'],
                      '}': ['ε']},
    'STATEMENT': {   ';': [';'],
                     'break': ['break', ';'],
                     'float': ['VARDECL', ';'],
                     'for': ['FORSTAT'],
                     'ident': ['ATRIBSTAT', ';'],
                     'if': ['IFSTAT'],
                     'int': ['VARDECL', ';'],
                     'print': ['PRINTSTAT', ';'],
                     'read': ['READSTAT', ';'],
                     'return': ['RETURNSTAT', ';'],
                     'string': ['VARDECL', ';'],
                     '{': ['{', 'STATELIST', '}']},
    'TERM': {   '(': ['UNARYEXPR', "TERM'"],
                '+': ['UNARYEXPR', "TERM'"],
                '-': ['UNARYEXPR', "TERM'"],
                'float_constant': ['UNARYEXPR', "TERM'"],
                'ident': ['UNARYEXPR', "TERM'"],
                'int_constant': ['UNARYEXPR', "TERM'"],
                'null': ['UNARYEXPR', "TERM'"],
                'string_constant': ['UNARYEXPR', "TERM'"]},
    "TERM'": {   '!=': ['ε'],
                 '%': ['%', 'TERM'],
                 ')': ['ε'],
                 '*': ['*', 'TERM'],
                 '+': ['ε'],
                 '-': ['ε'],
                 '/': ['/', 'TERM'],
                 ';': ['ε'],
                 '<': ['ε'],
                 '==': ['ε'],
                 '>': ['ε'],
                 ']': ['ε']},
    'UNARYEXPR': {   '(': ['FACTOR'],
                     '+': ['+', 'FACTOR'],
                     '-': ['-', 'FACTOR'],
                     'float_constant': ['FACTOR'],
                     'ident': ['FACTOR'],
                     'int_constant': ['FACTOR'],
                     'null': ['FACTOR'],
                     'string_constant': ['FACTOR']},
    'VARDECL': {   'float': ['float', 'ident', "VARDECL'"],
                   'int': ['int', 'ident', "VARDECL'"],
                   'string': ['string', 'ident', "VARDECL'"]},
    "VARDECL'": {';': ['ε'], '[': ['[', 'int_constant', ']', "VARDECL'"]},
    'start': {   '$': ['ε'],
                 ';': ['STATEMENT'],
                 'break': ['STATEMENT'],
                 'def': ['FUNCLIST'],
                 'float': ['STATEMENT'],
                 'for': ['STATEMENT'],
                 'ident': ['STATEMENT'],
                 'if': ['STATEMENT'],
                 'int': ['STATEMENT'],
                 'print': ['STATEMENT'],
                 'read': ['STATEMENT'],
                 'return': ['STATEMENT'],
                 'string': ['STATEMENT'],
                 '{': ['STATEMENT']}}
